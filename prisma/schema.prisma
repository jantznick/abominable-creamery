// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING   // Order created, payment maybe processing or not yet attempted
  PAID      // Payment successful
  SHIPPED   // Order shipped to customer
  FAILED    // Payment failed
}

enum AddressType {
  SHIPPING
  BILLING
}

// Models

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  name          String?
  phone         String?  // Add optional phone number
  passwordHash  String
  role          UserRole @default(USER)
  stripeCustomerId String? @unique // Add Stripe Customer ID field
  orders        Order[]  // Relation to Orders
  addresses     Address[] // Relation to Addresses
  subscriptions Subscription[] // Add relation to Subscriptions
  savedCards    SavedCard[] // Relation to Saved Cards
  passwordResetTokens PasswordResetToken[] // ADD: Relation to PasswordResetToken
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Order {
  id                 Int       @id @default(autoincrement())
  userId             Int?
  user               User?     @relation(fields: [userId], references: [id])
  subscriptionId     Int?      @unique // Link to the local Subscription record if applicable
  subscription       Subscription? @relation(fields: [subscriptionId], references: [id])
  status             OrderStatus    // e.g., PENDING, PAID, SHIPPED, FAILED, CANCELED
  totalAmount        Decimal   @db.Decimal(10, 2)
  // Add stripe payment intent ID for potential lookup/linking
  stripePaymentIntentId String? @unique // Link to the Stripe Payment Intent
  
  // --- ADD checkoutAttemptId field ---
  checkoutAttemptId String?  @unique // Links back to the temporary checkout attempt record
  // ----------------------------------

  // Shipping Information
  shippingName       String?
  shippingAddress1   String?
  shippingAddress2   String?    // Optional
  shippingCity       String?
  shippingState      String?
  shippingPostalCode String?
  shippingCountry    String?

  // Contact Information
  contactEmail       String
  contactPhone       String?

  items              OrderItem[] // Relation to OrderItem model
  notes              String?     // Optional field for customer notes
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([userId])
  @@index([createdAt])
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  orderId     Int
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String  // Stripe Product ID
  productName String  // Name stored at time of purchase
  quantity    Int
  price       Decimal @db.Decimal(10, 2) // Price per unit at time of purchase

  @@index([orderId])
}

// --- Session Table Model (for connect-pg-simple) ---
model Session {
  sid     String   @id // Session ID, primary key
  sess    Json     // Stores session data as JSON
  expire  DateTime // Timestamp when the session expires

  @@index([expire]) // Index for efficient session cleanup
}

model Address {
  id            Int     @id @default(autoincrement())
  userId        Int     // Relation to User
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade delete if user is deleted

  type          AddressType // Shipping or Billing
  streetAddress String
  city          String
  state         String
  postalCode    String
  country       String
  isDefault     Boolean @default(false) // Whether this is the default address of its type for the user

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

// --- Saved Credit Card Model ---
model SavedCard {
  id                   Int      @id @default(autoincrement())
  userId               Int
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade delete if user is deleted

  stripePaymentMethodId String   @unique // The pm_... ID from Stripe.
  brand                String   // e.g., "visa", "mastercard".
  last4                String   // Last four digits.
  expMonth             Int      // Expiration month.
  expYear              Int      // Expiration year.
  isDefault            Boolean  @default(false) // Indicates the default payment method for the user.

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
  // Optional: Add a unique constraint if only one default is allowed per user
  // @@unique([userId, isDefault]) // This needs careful handling when setting a new default
}

// --- New Subscription Model ---
model Subscription {
  id                   Int      @id @default(autoincrement())
  userId               Int
  user                 User     @relation(fields: [userId], references: [id])
  stripeSubscriptionId String   @unique
  stripePriceId        String   // The Stripe Price ID for the subscription item
  status               String   // e.g., active, past_due, canceled, trialing, incomplete
  interval             String   // e.g., month, year
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean  @default(false)
  collectionPaused     Boolean  @default(false) // Tracks if payment collection is paused
  
  // --- ADD checkoutAttemptId field ---
  checkoutAttemptId String? // Links back to the temporary checkout attempt record 
  // ----------------------------------

  orders               Order[] // Relation to orders generated by this subscription
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
  @@index([stripeSubscriptionId]) // Index for webhook lookups
}

// --- ADD CheckoutAttempt model --- 
model CheckoutAttempt {
  id        String   @id // Use a UUID generated by the application as the primary key
  data      Json     // Store the full checkout context (items, addresses, userId, etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Optional: Add an expiry field if implementing DB-level TTL isn't feasible
  // expiresAt DateTime?

  @@index([createdAt]) // Index for potential cleanup jobs
}
// -------------------------------

// --- ADD Password Reset Token model ---
model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique // The unique reset token (e.g., UUID)
  userId    Int      // Relation to the User
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade delete if user is deleted
  expiresAt DateTime // Timestamp when the token expires
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt]) // Index for cleaning up expired tokens
}
// ------------------------------------

// --- Removed Model for Temporary Checkout Context ---
// model PendingOrderContext {
//   paymentIntentId String @id @unique
//   userId             Int?
//   stripeSubscriptionId String
//   stripeInvoiceId    String
//   cartDetails        String
//   createdAt          DateTime  @default(now())
//   @@index([createdAt])
// }
